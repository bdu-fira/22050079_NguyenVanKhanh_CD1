# """
# Django settings for backend project.

# Generated by 'django-admin startproject' using Django 5.1.7.

# For more information on this file, see
# https://docs.djangoproject.com/en/5.1/topics/settings/

# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/5.1/ref/settings/
# """

# from pathlib import Path
# from datetime import timedelta

# # Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent


# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# # SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-wg3t2snsh#c1^w4^gl!omu2h$3jxqp(g7r-ip3k&54^_%3p3qz"

# # SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

# ALLOWED_HOSTS = []


# # Application definition

# INSTALLED_APPS = [
#     "django.contrib.admin",
#     "django.contrib.auth",
#     "django.contrib.contenttypes",
#     "django.contrib.sessions",
#     "django.contrib.messages",
#     "django.contrib.staticfiles",
#     "rest_framework",  # Django REST Framework
#     'rest_framework_simplejwt',
#     "api",  # Ứng dụng API
#     "restaurant",  # Ứng dụng quản lý nhà hàng
#     'corsheaders',  # Thư viện cho CORS (Cross-Origin Resource Sharing)
# ]

# REST_FRAMEWORK = {
#     'DEFAULT_AUTHENTICATION_CLASSES': (
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#         # 'rest_framework.authentication.SessionAuthentication',
#     ),
    
#     'DEFAULT_PERMISSION_CLASSES': (
#         'rest_framework.permissions.IsAuthenticated',
#     ),

#     'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination','PAGE_SIZE': 100 , 
    

#     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']   
# }

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#     # 'USER_ID_FIELD': 'ID',
#     # 'USER_ID_CLAIM': 'user_id',

# }

# MIDDLEWARE = [
#     'corsheaders.middleware.CorsMiddleware', # Middleware cho CORS
#     "django.middleware.security.SecurityMiddleware",
#     "django.contrib.sessions.middleware.SessionMiddleware",
#     "django.middleware.common.CommonMiddleware",
#     "django.middleware.csrf.CsrfViewMiddleware",
#     "django.contrib.auth.middleware.AuthenticationMiddleware",
#     "django.contrib.messages.middleware.MessageMiddleware",
#     "django.middleware.clickjacking.XFrameOptionsMiddleware",

    
# ]

# ROOT_URLCONF = "backend.urls"

# TEMPLATES = [
#     {
#         "BACKEND": "django.template.backends.django.DjangoTemplates",
#         "DIRS": [],
#         "APP_DIRS": True,
#         "OPTIONS": {
#             "context_processors": [
#                 "django.template.context_processors.debug",
#                 "django.template.context_processors.request",
#                 "django.contrib.auth.context_processors.auth",
#                 "django.contrib.messages.context_processors.messages",
#             ],
#         },
#     },
# ]

# WSGI_APPLICATION = "backend.wsgi.application"


# # Database
# # https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     # "default": {
#     #     "ENGINE": "django.db.backends.sqlite3",
#     #     "NAME": BASE_DIR / "db.sqlite3",
#     # }

#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": 'datbandb3',
#         'USER': 'django_user',
#         "PASSWORD": "12345678",
#         "HOST": "127.0.0.1",
#         "PORT": "3306",
#         'OPTIONS': {
#             'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
#             'charset': 'utf8mb4',
#             'connect_timeout': 5,
#         }
#     }
# }


# # Password validation
# # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
#     },
#     {
#         "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
#     },
# ]


# # Internationalization
# # https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = "en-us"

# TIME_ZONE = "UTC"

# USE_I18N = True

# USE_TZ = True


# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = "static/"

# # Default primary key field type
# # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# # AUTH_USER_MODEL = 'restaurant.User'   # Sử dụng custom User model


# # CORS settings
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",  # Frontend URL
# ]
# CORS_ALLOW_CREDENTIALS = True

# SESSION_COOKIE_SAMESITE = "Lax"       # hoặc "None" nếu FE dùng HTTPS
# SESSION_COOKIE_SECURE = False         # Đặt True nếu chạy HTTPS

# CSRF_COOKIE_SAMESITE    = "Lax"
# CSRF_COOKIE_SECURE = False            # Đặt True nếu chạy HTTPS

# CSRF_TRUSTED_ORIGINS = [
#     "http://localhost:5173",
# ]

# CORS_ALLOW_HEADERS = [
#     "accept",
#     "authorization",
#     "content-type",
#     "origin",
#     "x-csrftoken",
#     "x-requested-with",
# ]



# # AUTH_USER_MODEL = 'restaurant.NguoiDung'




# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.AllowAllUsersModelBackend',
#     'django.contrib.auth.backends.ModelBackend',
# ]




# DEBUG = True







#//////////////////////////////////////////////////////////////\\\\\\\

### File: settings.py (updated)

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv

# 1. Load .env
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=BASE_DIR / '.env')

# 2. Core settings
SECRET_KEY = os.getenv('SECRET_KEY')
if not SECRET_KEY:
    raise RuntimeError('SECRET_KEY not set in environment')

DEBUG = os.getenv('DEBUG', 'False') == 'True'
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if os.getenv('ALLOWED_HOSTS') else []

# 3. Applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'api',
    'restaurant',
]

# 4. Middleware
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# 5. Database
DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', ''),
        'OPTIONS': {
            'init_command': f"SET sql_mode='{os.getenv('DB_SQL_MODE')}'",
            'charset': os.getenv('DB_CHARSET'),
            'connect_timeout': int(os.getenv('DB_CONNECT_TIMEOUT', 5)),
        },
    }
}

# 6. REST Framework & JWT
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=int(os.getenv('JWT_ACCESS_LIFETIME', 60))),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(os.getenv('JWT_REFRESH_LIFETIME', 1))),
}

# 7. CORS & Cookies
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS') == 'True'
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', '').split(',')
CORS_ALLOW_HEADERS = [
    'accept',
    'authorization',
    'content-type',
    'origin',
    'x-csrftoken',
    'x-requested-with',
]

SESSION_COOKIE_SAMESITE = os.getenv('SESSION_COOKIE_SAMESITE', 'Lax')
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE') == 'True'
CSRF_COOKIE_SAMESITE = os.getenv('CSRF_COOKIE_SAMESITE', 'Lax')
CSRF_COOKIE_SECURE = os.getenv('CSRF_COOKIE_SECURE') == 'True'

# 8. Static files & Defaults
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



## Hướng dẫn chi tiết

# 1. **Cài đặt thư viện**
#    ```bash
#    pip install python-dotenv
#    ```
# 2. **Tạo file `.env`**
#    - Tạo file `.env` ở thư mục gốc (nằm chung cấp với `manage.py`).
#    - Dán nội dung mẫu từ phần **File: .env**.
# 3. **Bảo mật**
#    - Thêm `.env` vào `.gitignore`:
#      ```text
#      # .gitignore
#      .env
#      ```
# 4. **Sửa `settings.py`**
#    - Cài đặt `from dotenv import load_dotenv`.
#    - Gọi `load_dotenv()` trước khi dùng `os.getenv()`.
#    - Thay mọi giá trị cứng (`SECRET_KEY`, database, CORS, cookie…) bằng `os.getenv('VAR_NAME')`.
# 5. **Cấu hình HTTP vs HTTPS**
#    - Nếu chạy **cục bộ** với HTTP, giữ `SESSION_COOKIE_SECURE=False` và SameSite=`Lax`.
#    - Khi deploy **production** với HTTPS, set:
#      ```bash
#      SESSION_COOKIE_SECURE=True
#      CSRF_COOKIE_SECURE=True
#      SESSION_COOKIE_SAMESITE=None
#      CSRF_COOKIE_SAMESITE=None
#      ```
# 6. **Khởi động lại server**
#    ```bash
#    python manage.py runserver
#    ```
#    - Kiểm tra log: không lỗi thiếu `SECRET_KEY`.
#    - Dùng `print(os.getenv('SECRET_KEY'))` tạm thời ở đầu `settings.py` để debug.

# Xong! Bạn đã triển khai xong biến môi trường và chỉnh sửa `settings.py` để bảo mật và linh động.
